version: '3.9'

services:

  postgres-db:
    container_name: postgres_shop
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=online_shop
      - POSTGRES_DB=shop
    ports:
      - "9000:5432"
    volumes:
      - D:\pg\online_shop:/var/lib/postgresql/data

  redis:
    container_name: redis
    ports:
      - "6379:6379"
      - "8001:8001"
    image: redis/redis-stack

  mongo_db:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: online_shop
    volumes:
      - D:\pg\mongo:/data/db

  mongoexpress:
    image: mongo-express:1.0.2
    depends_on:
      - mongo_db
    restart: "no"
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: online_shop
      ME_CONFIG_MONGODB_URL: mongodb://admin:online_shop@mongo_db:27017/
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8081/status || exit -1
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic order-changed --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic user-updated --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic statistics --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "


  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9999:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      - kafka

  user-service:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    ports:
      - "9001:9001"
    depends_on:
      - postgres-db
    restart: always
    environment:
      - DB_URL=jdbc:postgresql://postgres-db:5432/shop
      - DB_USER=admin
      - DB_PASS=online_shop

  product-service:
    build:
      context: ./ProductService
      dockerfile: Dockerfile
    ports:
      - "9002:9002"
    depends_on:
      - postgres-db
    restart: always
    environment:
      - DB_URL=jdbc:postgresql://postgres-db:5432/shop
      - DB_USER=admin
      - DB_PASS=online_shop

#  order-service:
#    build:
#      context: ./user-service
#      dockerfile: Dockerfile
#    ports:
#      - "9003:9003"
#    depends_on:
#      - postgres
#    restart: always
#    environment:
#      - PRODUCT_SERVICE_PATH=http://product-service:9002

